<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 日拱一卒，反求诸己</title>
    <link>https://liuyu121.github.io/categories/go/</link>
    <description>Recent content in go on 日拱一卒，反求诸己</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Sep 2020 15:34:42 +0800</lastBuildDate>
    
	<atom:link href="https://liuyu121.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Boltdb 源码学习 - 组织结构（二）</title>
      <link>https://liuyu121.github.io/post/learn-boltdb-2/</link>
      <pubDate>Wed, 02 Sep 2020 15:34:42 +0800</pubDate>
      
      <guid>https://liuyu121.github.io/post/learn-boltdb-2/</guid>
      <description>架构图 bolt 主要文件如下，共 4k+ 行，其他形如 bolt_* 的文件，是为了兼容各个操作系统而存在的，统一封装了不同操作系统的一些系统调用： 1 2 3 4 5 6 7 8 9 10 $</description>
    </item>
    
    <item>
      <title>Boltdb 源码学习 - 基础（一）</title>
      <link>https://liuyu121.github.io/post/learn-boltdb-1/</link>
      <pubDate>Wed, 02 Sep 2020 11:04:39 +0800</pubDate>
      
      <guid>https://liuyu121.github.io/post/learn-boltdb-1/</guid>
      <description>boltDB 是用 go 写的一款基于本地内存的 k-v 存储引擎，etcd 底层就使用了 boltDB。相对于其他常见的如 MySQL、redis 等，实现的公功能较简单，</description>
    </item>
    
    <item>
      <title>Go Sort 使用</title>
      <link>https://liuyu121.github.io/post/go-sort/</link>
      <pubDate>Mon, 24 Aug 2020 21:30:23 +0800</pubDate>
      
      <guid>https://liuyu121.github.io/post/go-sort/</guid>
      <description>排序 slice、map 等 一般排序使用 sort 包，下面以 int 型举例。 排序 int slice 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func sortSlice() { fmt.Println(&amp;#34;----- 一维正序排序 -----&amp;#34;) nums := []int{9, 8, 0,</description>
    </item>
    
    <item>
      <title>go for-range 问题</title>
      <link>https://liuyu121.github.io/post/go-for-range-problems/</link>
      <pubDate>Tue, 18 Aug 2020 17:45:22 +0800</pubDate>
      
      <guid>https://liuyu121.github.io/post/go-for-range-problems/</guid>
      <description>先开宗明义吧，for-range 是个语法糖，内部还是以 for 循环 实现： 1 2 3 4 5 6 7 8 for_temp := range len_temp := len(for_temp) for index_temp = 0; index_temp &amp;lt; len_temp; index_temp++ { value_temp = for_temp[index_temp] index = index_temp value = value_temp original body } 这里</description>
    </item>
    
  </channel>
</rss>